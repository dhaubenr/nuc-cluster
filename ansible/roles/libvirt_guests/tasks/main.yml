---

# named provisioning block - configures libvirt networking
# run as 'root' via ansible's 'become' directive
# must be called with option '--ask-become-pass'
- name: configure libvirt network
  block:

    # handlers will always be triggered by setting the 'changed' condition
    # of the task to 'true'
    - name: define and start network {{ libvirt_network_name }}
      virt_net:
        command: define
        name: '{{ libvirt_network_name }}'
        xml: '{{ lookup("template", "{{ role_path }}/templates/network.xml.j2") }}'
        state: present
      changed_when: true
      notify:
        - start libvirt network
        - autostart libvirt network

    - name: prepare route definition variables
      block:
        - name: get current host index as list variable
          set_fact:
            current_host_index_as_list: '{{ [host_index] | list }}'

        - name: compute list of other host indices
          set_fact:
            other_host_indices: "{{ groups['nucs'] | map('extract', hostvars, 'host_index') | list | difference(current_host_index_as_list) }}"

    - name: add IPv4 routes to other hosts' libvirt networks
      command:
        cmd: 'ip -4 route add {{ libvirt_network_prefix }}{{ item }}.0/24 via {{ secondary_ip_prefix }}{{ item }}'
      ignore_errors: yes
      loop: '{{ other_host_indices }}'
  become: yes

# named provisioning block - configures libvirt storage
# run as 'root' via ansible's 'become' directive
# must be called with option '--ask-become-pass'
- name: configure libvirt storage
  block:
    - name: create directories for mount points
      file:
        path: '{{ data_lv_mount_point }}'
        mode: '0777'
        state: directory

    - name: create volume group {{ data_vg_name }}
      lvg:
        vg: '{{ data_vg_name }}'
        pvs: /dev/sda
        state: present

    - name: create logical volume {{ data_lv_name }} with size {{ data_lv_size }}
      lvol:
        vg: '{{ data_vg_name }}'
        lv: '{{ data_lv_name }}'
        size: '{{ data_lv_size }}'

    - name: derive lvm mapper device name from volume group {{ data_vg_name }}
      set_fact:
        data_vg_mapper: '{{ data_vg_name | regex_replace("-", "--") }}'

    - name: create filesystem on logical volume {{ data_lv_name }}
      filesystem:
        fstype: xfs
        dev: /dev/{{ data_vg_name }}/{{ data_lv_name }}

    - name: mount filesystem on logical volume {{ data_lv_name }}
      mount:
        path: '{{ data_lv_mount_point }}'
        src: /dev/mapper/{{ data_vg_mapper }}-{{ data_lv_name }}
        fstype: xfs
        opts: rw,relatime,attr2,inode64,noquota
        state: mounted

    - name: change mount point permissions
      file:
        path: '{{ data_lv_mount_point }}'
        mode: '0777'
        state: directory

    - name: create libvirt storage directory
      file:
        path: '{{ data_lv_mount_point }}/{{ libvirt_storage_directory }}/{{ libvirt_storage_pool }}'
        mode: '0777'
        state: directory

    # handlers will always be triggered by setting the 'changed' condition
    # of the task to 'true'
    - name: define libvirt storage pool {{ libvirt_storage_pool }}
      virt_pool:
        command: define
        name: '{{ libvirt_storage_pool }}'
        xml: '{{ lookup("template", "{{ role_path }}/templates/storagepool.xml.j2") }}'
        state: present
      changed_when: true
      notify:
        - build libvirt storage pool
        - autostart libvirt storage pool
  become: yes

# named provisioning block - prepares Linux cloud image for use with libvirt
# run as 'root' via ansible's 'become' directive
# must be called with option '--ask-become-pass'
- name: prepare Linux cloud image for libvirt
  block:
    - name: download and extract latest Linux cloud image
      block:
        - name: download cloud image
          get_url:
            url: '{{ guest_os_cloud_image_url }}'
            dest: /root/
            mode: '0644'

        - name: extract cloud image
          command:
            cmd: 'unxz --keep {{ guest_os_cloud_image }}.qcow2.xz'
            chdir: /root/
      become: yes

    - name: resize cloud image
      command:
        argv:
          - qemu-img
          - resize
          - '{{ guest_os_cloud_image }}.qcow2'
          - '{{ guest_os_cloud_image_size }}'
        chdir: /root/

    - name: copy cloud image to /var/lib/libvirt/images
      command:
        argv:
          - qemu-img
          - convert
          - -f
          - qcow2
          - '{{ guest_os_cloud_image }}.qcow2'
          - '/var/lib/libvirt/images/{{ guest_os_cloud_image }}.qcow2'
        chdir: /root/

    - name: create cloud image configuration seed
      block:
        - name:
          set_fact:
            libvirt_guest_password: |
              '{{ lookup("password", role_path + "/credentials/" + inventory_hostname_short + "_libvirt_guest length=15 chars=ascii_letters,digits") }}'

        - name: create cloud image configuration files
          template:
            src: '{{ role_path }}/templates/cloud_seed.txt.j2'
            dest: '/root/seed_{{ inventory_hostname_short }}_k8s_{{ item }}.txt'
            owner: root
            group: root
            mode: '0644'
          loop: '{{ range(1, libvirt_guest_range_max | int, 1) | list }}'

        - name: create cloud image configuration ISOs
          command:
            argv:
              - cloud-localds
              - '/var/lib/libvirt/images/seed_{{ inventory_hostname_short }}_k8s_{{ item }}.iso'
              - 'seed_{{ inventory_hostname_short }}_k8s_{{ item }}.txt'
            chdir: /root/
      become: yes

    - name: create libvirt guests
      block:
        - name: create libvirt guest volume configuration files
          template:
            src: '{{ role_path }}/templates/volume.xml.j2'
            dest: '/root/volume_{{ inventory_hostname_short }}_k8s_{{ item }}.xml'
            owner: root
            group: root
            mode: '0644'
          loop: '{{ range(1, libvirt_guest_range_max | int, 1) | list }}'

        - name: create libvirt guest volumes
          command:
            argv:
              - virsh
              - vol-create
              - '{{ libvirt_storage_pool }}'
              - 'volume_{{ inventory_hostname_short }}_k8s_{{ item }}.xml'
            chdir: /root/
          loop: '{{ range(1, libvirt_guest_range_max | int, 1) | list }}'

        - name: create libvirt guest domains
          virt:
            command: define
            xml: '{{ lookup("template", "{{ role_path }}/templates/guest.xml.j2") }}'
            autostart: yes
          loop: '{{ range(1, libvirt_guest_range_max | int, 1) | list }}'
      become: yes
  become: yes
